{
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Ping the API",
          "request": {
            "url": {
              "path": [
                "ping"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201))",
                  "",
                  "pm.test('Content-Type header is correct', () => pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8'))"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "name": "Get all Bookings",
      "item": [
        {
          "name": "Get all bookings",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get all bookings with all parameters",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [
                {
                  "key": "firstname",
                  "value": "sally"
                },
                {
                  "key": "lastname",
                  "value": "brown"
                },
                {
                  "key": "checkin",
                  "value": "2017-11-11"
                },
                {
                  "key": "checkout",
                  "value": "2017-11-15"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get all bookings with the firstname and last name parameter",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [
                {
                  "key": "firstname",
                  "value": "sally"
                },
                {
                  "key": "lastname",
                  "value": "brown"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get all bookings with the firstname  parameter",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [
                {
                  "key": "firstname",
                  "value": "sally"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get all bookings with the lastname parameter",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [
                {
                  "key": "lastname",
                  "value": "brown"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get all bookings with the checkin parameter",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [
                {
                  "key": "checkin",
                  "value": "2017-11-11"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get all bookings with the checkout parameter",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [
                {
                  "key": "checkout",
                  "value": "2017-11-11"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        }
      ],
      "event": []
    },
    {
      "name": "Get a single booking",
      "item": [
        {
          "name": "Get a single booking",
          "request": {
            "url": {
              "path": [
                "booking",
                "1"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  "",
                  "pm.test('Content-Type header is correct', () => pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8'))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get a single booking with XML header set",
          "request": {
            "url": {
              "path": [
                "booking",
                "1"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))"
                ]
              }
            }
          ]
        },
        {
          "name": "Get a single booking dynamically",
          "request": {
            "url": {
              "path": [
                "booking",
                "{{booking_id}}"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"booking_id\", _.random(1,10))"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  "    ",
                  "",
                  "",
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "if(pm.response.to.have.header('Content-Type') === 'application/json; charset=utf-8') {",
              "    pm.test(\"Response data format is correct\", () => {",
              "    var jsonData = pm.response.json()",
              "    pm.expect(jsonData.firstname).to.be.a('string')",
              "    pm.expect(jsonData.lastname).to.be.a('string')",
              "    pm.expect(jsonData.totalprice).to.a('number')",
              "    pm.expect(jsonData.depositpaid).to.be.a('boolean')",
              "    pm.expect(jsonData.bookingdates.checkin).to.be.a('string')",
              "    pm.expect(jsonData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)",
              "    pm.expect(jsonData.bookingdates.checkout).to.be.a('string')",
              "    pm.expect(jsonData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/)",
              "});",
              "",
              "(pm.response.json().additionalneeds === undefined ? pm.test.skip : pm.test)('Customer has additional needs', () => {",
              "        pm.expect(pm.response.json().additionalneeds).to.be.a('string')",
              "});",
              "}",
              "",
              ""
            ]
          }
        }
      ]
    },
    {
      "name": "Create a new booking",
      "item": [
        {
          "name": "Create a new booking with JSON",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"firstname\" : \"Sally\",\r\n\t\"lastname\" : \"Brown\",\r\n\t\"totalprice\" : 111,\r\n\t\"depositpaid\" : true,\r\n\t\"additionalneeds\" : \"Breakfast\",\r\n\t\"bookingdates\" : {\r\n\t\t\"checkin\" : \"2013-02-23\",\r\n\t\t\"checkout\" : \"2014-10-23\"\r\n\t}\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  "",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Create a new booking with XML",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "text/xml"
              },
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<booking>\r\n    <firstname>Sally</firstname>\r\n    <lastname>Brown</lastname>\r\n    <totalprice>111</totalprice>\r\n    <depositpaid>true</depositpaid>\r\n    <additionalneeds>Breakfast</additionalneeds>\r\n    <bookingdates>\r\n        <checkin>2013/02/23</checkin>\r\n        <checkout>2014/10/23</checkout>\r\n    </bookingdates>\r\n</booking>"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Dynamically create a new booking with JSON",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"firstname\" : {{first_name}},\r\n\t\"lastname\" : {{last_name}},\r\n\t\"totalprice\" : {{total_price}},\r\n\t\"depositpaid\" : {{depositPaid}},\r\n\t\"additionalneeds\" : {{additional_needs}},\r\n\t\"bookingdates\" : {\r\n\t\t\"checkin\" : {{check_in}},\r\n\t\t\"checkout\" : {{check_out}}\r\n\t}\r\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.sendRequest(\"https://randomuser.me/api/\", (err, res) => {",
                  "    var firstname = res.json().results[0].name.first",
                  "    var lastname  = res.json().results[0].name.last",
                  "    pm.environment.set(\"first_name\", JSON.stringify((_.capitalize(firstname))))",
                  "    pm.environment.set(\"last_name\", JSON.stringify((_.capitalize(lastname))))",
                  "})",
                  "",
                  "pm.environment.set(\"total_price\", _.random(0, 1000))",
                  "",
                  "const depositPaid = [true, false]",
                  "pm.environment.set(\"depositPaid\", _.shuffle(depositPaid)[0])",
                  "",
                  "const moment = require('moment')",
                  "pm.environment.set(\"check_in\", JSON.stringify(moment().format('YYYY-MM-DD')))",
                  "pm.environment.set(\"check_out\", JSON.stringify(moment().add(_.random(1, 14), 'days').format('YYYY-MM-DD')))",
                  "",
                  "const items = [\"None\", \"Breakfast\", \"Lunch\", \"Dinner\", \"Late Checkout\", \"Newspaper\", \"Extra Pillow\"]",
                  "pm.environment.set(\"additional_needs\", JSON.stringify(_.shuffle(items)[0]))"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  "",
                  "function cleanup() {",
                  "    const clean = ['first_name', 'last_name', 'total_price', 'depositPaid', 'check_in', 'check_out', 'additional_needs']",
                  "    for(let i = 0; i < clean.length; ++i){",
                  "        pm.environment.unset(clean[i])",
                  "    }",
                  "}",
                  "cleanup()",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Dynamically create a new booking with XML",
          "request": {
            "url": {
              "path": [
                "booking"
              ],
              "host": [
                "{{baseURL}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "text/xml"
              },
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "<booking>\r\n    <firstname>{{first_name}}</firstname>\r\n    <lastname>{{last_name}}</lastname>\r\n    <totalprice>{{total_price}}</totalprice>\r\n    <depositpaid>{{depositPaid}}</depositpaid>\r\n    <additionalneeds>{{additional_needs}}</additionalneeds>\r\n    <bookingdates>\r\n        <checkin>{{check_in}}</checkin>\r\n        <checkout>{{check_out}}</checkout>\r\n    </bookingdates>\r\n</booking>"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.sendRequest(\"https://randomuser.me/api/\", (err, res) => {",
                  "    var firstname = res.json().results[0].name.first",
                  "    var lastname  = res.json().results[0].name.last",
                  "    pm.environment.set(\"first_name\", JSON.stringify((_.capitalize(firstname))))",
                  "    pm.environment.set(\"last_name\", JSON.stringify((_.capitalize(lastname))))",
                  "})",
                  "",
                  "pm.environment.set(\"total_price\", _.random(0, 1000))",
                  "",
                  "const depositPaid = [true, false]",
                  "pm.environment.set(\"depositPaid\", _.shuffle(depositPaid)[0])",
                  "",
                  "const moment = require('moment')",
                  "pm.environment.set(\"check_in\", JSON.stringify(moment().format('YYYY-MM-DD')))",
                  "pm.environment.set(\"check_out\", JSON.stringify(moment().add(_.random(1, 14), 'days').format('YYYY-MM-DD')))",
                  "",
                  "const items = [\"None\", \"Breakfast\", \"Lunch\", \"Dinner\", \"Late Checkout\", \"Newspaper\", \"Extra Pillow\"]",
                  "pm.environment.set(\"additional_needs\", JSON.stringify(_.shuffle(items)[0]))"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200))",
                  "",
                  "function cleanup() {",
                  "    const clean = ['first_name', 'last_name', 'total_price', 'depositPaid', 'check_in', 'check_out', 'additional_needs']",
                  "    for(let i = 0; i < clean.length; ++i){",
                  "        pm.environment.unset(clean[i])",
                  "    }",
                  "}",
                  "cleanup()",
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [],
  "info": {
    "name": "Restful_Booker_Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  }
}
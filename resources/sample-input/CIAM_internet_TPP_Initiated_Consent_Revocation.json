{
  "item": [
    {
      "name": "Check Mock Components and TLSMA",
      "item": [
        {
          "name": "Conditionally skip tests",
          "request": {
            "description": {
              "content": "This request will stop execution of further requests when IDP is not accessible.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "get"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "//stop execution if IDP or Client is not accessible",
                  "if (pm.environment.get('preferred_idp') !== pm.environment.get('dev0_idp') || pm.environment.get('mock_client_enabled') !== true || pm.environment.get('enable_tlsma_tests') !== true) {",
                  "  postman.setNextRequest(null);",
                  "}"
                ]
              }
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Install Javascript libraries",
      "description": {
        "content": "Install Javascript libraries used in the whole collection",
        "type": "text/plain"
      },
      "item": [
        {
          "name": "Init jsrsasign",
          "request": {
            "description": {
              "content": "This is a pre-requisite to implement private key jwt signed keys to retrieve an access token from PingFederate.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "path": [
                "jsrsasign",
                "jsrsasign-latest-all-min.js"
              ],
              "host": [
                "kjur",
                "github",
                "io"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.environment.set(\"jsrsasign-js\", responseBody);",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": [],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Create Consent&Refresh Token",
      "item": [
        {
          "name": "Send TPP Payload",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "authorization.oauth2"
              ],
              "host": [
                "{{public_idp_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "response_type",
                  "value": "{{tpp_responseType}}"
                },
                {
                  "key": "client_id",
                  "value": "{{tpp_clientId}}"
                },
                {
                  "key": "scope",
                  "value": "{{tpp_au_scopes}}"
                },
                {
                  "key": "nonce",
                  "value": "{{tpp_nonce}}"
                },
                {
                  "key": "redirect_uri",
                  "value": "{{tpp_redirectUri}}"
                },
                {
                  "key": "request",
                  "value": "{{signed_jwt}}"
                },
                {
                  "key": "state",
                  "value": "{{tpp_state}}"
                }
              ],
              "options": {
                "raw": {
                  "language": "text"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/* loading of the jsrsasign library into Postman Sandbox */",
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(pm.environment.get(\"jsrsasign-js\")); //import javascript jsrsasign",
                  "",
                  "// define jwt header",
                  "var header = {",
                  "\t\"typ\": \"JWT\",",
                  "\t\"alg\": \"PS256\"",
                  "};",
                  "header.kid = pm.variables.get(\"tpp_kid\");",
                  "",
                  "// define jwt payload",
                  "var data = {",
                  "  \"claims\": {",
                  "    \"sharing_duration\": 31536000,",
                  "    \"id_token\": {",
                  "      \"acr\": {",
                  "        \"essential\": true,",
                  "        \"values\": [\"urn:cds.au:cdr:2\"]",
                  "      }",
                  "    }",
                  "  }",
                  "};",
                  "",
                  "var scopes = pm.variables.get(\"tpp_scopes\");",
                  "// no need to test profile scope yet since the client does not have it enabled",
                  "pm.variables.set(\"tpp_au_scopes\", scopes);",
                  "",
                  "// add variable data to payload",
                  "data.scope = pm.variables.get(\"tpp_au_scopes\");",
                  "data.response_type = pm.variables.get(\"tpp_responseType\");",
                  "data.aud = \"https://\"+pm.variables.get(\"public_idp_domain\")+pm.variables.get(\"url_prefix\")+\"identity\";",
                  "data.redirect_uri = pm.variables.get(\"tpp_redirectUri\");",
                  "data.client_id = pm.variables.get(\"tpp_clientId\");",
                  "data.state = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 11);",
                  "data.nonce = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 12);",
                  "",
                  "data.exp = Date.now() + 600;",
                  "// set environment variables for parameters",
                  "pm.environment.set(\"tpp_exp\", data.exp);",
                  "pm.environment.set(\"tpp_nonce\", data.nonce);",
                  "pm.environment.set(\"tpp_state\", data.state);",
                  "",
                  "// load the private key",
                  "var privateKey = pm.variables.get(\"tpp_privateKey\");",
                  "",
                  "// sign token",
                  "var signedToken = KJUR.jws.JWS.sign(header.alg, JSON.stringify(header), JSON.stringify(data), privateKey);",
                  "",
                  "pm.environment.set(\"signed_jwt\", signedToken);",
                  "console.log(signedToken);",
                  "",
                  "// Clear pf cookie",
                  "pm.environment.set('pf_cookie', '');",
                  "pm.environment.set('login_path', '');",
                  "pm.environment.set('resume_login_path', '');",
                  "pm.environment.set('login_redirect1', '');",
                  "pm.environment.set('samlresponse', '');",
                  "pm.environment.set('samlrequest', '');",
                  "pm.environment.set('relaystate', '');",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "tests[\"X-Frame-Options header is DENY\"] = postman.getResponseHeader(\"X-Frame-Options\") === \"SAMEORIGIN\";",
                  "tests[\"cookie is not undefined\"] = pm.cookies.get('PF_OB_SAML') !== undefined;",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('samlurl', $('form[method=post]').prop('action'));",
                  "pm.environment.set('samlrequest', $('input[name=SAMLRequest]').prop('value'));",
                  "pm.environment.set('relaystate', $('input[name=RelayState]').prop('value'));",
                  "pm.environment.set('pf_cookie', pm.cookies.get('PF'));",
                  "pm.environment.set('pf_tracking_cookie', pm.cookies.get('PF_TRACKING'));",
                  "var x=0;",
                  "while (pm.cookies.idx(x) !== undefined) {",
                  "  if (pm.cookies.idx(x).name.startsWith(\"PF_TRACKING-\")) {",
                  "    var trackingCookieName = pm.cookies.idx(x).name;",
                  "    console.log(trackingCookieName);",
                  "    pm.environment.set('pf_tracking_cookie_name', trackingCookieName);",
                  "    pm.environment.set('pf_tracking_cookie_value', pm.cookies.get(trackingCookieName));",
                  "  }",
                  "  x++;",
                  "}",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "TPP request SAML",
          "request": {
            "description": {
              "content": "Exchange authorization code for access token.\nTODO get the authorization code",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{samlurl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "description": {
                  "content": "http content type",
                  "type": "text/plain"
                },
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "SAMLRequest",
                  "value": "{{samlrequest}}"
                },
                {
                  "key": "RelayState",
                  "value": "{{relaystate}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('pf_cookie', pm.cookies.get('PF'));",
                  "pm.environment.set('login_path', $('form[method=POST]').prop('action'));",
                  "if (pm.environment.get('login_path') !== undefined && pm.environment.get('login_path') !== \"\") {",
                  "postman.setNextRequest('Submit Login form');",
                  "console.log(\"SAML login required\");",
                  "} else {",
                  "//tests[\"show request\" + JSON.stringify(pm.request)] = true;",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('resume_login_path', $('form[method=post]').prop('action'));",
                  "pm.environment.set('samlresponse', $('input[name=SAMLResponse]').prop('value'));",
                  "pm.environment.set('relaystate', $('input[name=RelayState]').prop('value'));",
                  "postman.setNextRequest('Follow login redirect');",
                  "console.log(\"SAML login not required\")",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Submit Login form",
          "request": {
            "description": {
              "content": "Exchange authorization code for access token.\nTODO get the authorization code",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{dev0_idp}}{{login_path}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "http content type",
                  "type": "text/plain"
                },
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "pf.username",
                  "value": "{{saml_user}}"
                },
                {
                  "key": "pf.pass",
                  "value": "{{saml_pass}}"
                },
                {
                  "key": "pf.ok",
                  "value": "clicked"
                },
                {
                  "key": "pf.adapterId",
                  "value": "TestSimpleAdapter"
                },
                {
                  "key": "pf.cancel",
                  "value": ""
                },
                {
                  "key": "Cookie",
                  "value": "PF={{pf_cookie}}"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.environment.has('skip_login_url')) {",
                  "tests[\"response code is 404\"] = responseCode.code === 404;",
                  "pm.environment.set('dev0_idp', pm.environment.get('preferred_idp'));",
                  "pm.environment.unset('skip_login_url');",
                  "} else {",
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "//tests[\"show request\" + JSON.stringify(pm.request)] = true;",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('resume_login_path', $('form[method=post]').prop('action'));",
                  "pm.environment.set('samlresponse', $('input[name=SAMLResponse]').prop('value'));",
                  "pm.environment.set('relaystate', $('input[name=RelayState]').prop('value'));",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.environment.get('login_path') !== null) {",
                  "console.log(\"performing SAML login\");",
                  "} else {",
                  "console.log(\"skipping SAML login\");",
                  "pm.environment.set('skip_login_url', pm.environment.get('preferred_idp'));",
                  "pm.environment.set('dev0_idp', 'postman-echo.com/get');",
                  "//postman.setNextRequest('Follow login redirect');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Follow login redirect",
          "request": {
            "description": {
              "content": "Exchange authorization code for access token.\nTODO get the authorization code",
              "type": "text/plain"
            },
            "url": {
              "host": [
                "{{resume_login_path}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "description": {
                  "content": "http content type",
                  "type": "text/plain"
                },
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "SAMLResponse",
                  "value": "{{samlresponse}}"
                },
                {
                  "key": "RelayState",
                  "value": "{{relaystate}}"
                }
              ],
              "options": {
                "raw": {
                  "language": "text"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 302\"] = responseCode.code === 302;",
                  "pm.environment.set('login_redirect1', pm.response.headers.get('Location'));",
                  "/*",
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('login_redirect1', $('form[method=post]').prop('action'));",
                  "pm.environment.set('resumePath', $('input[name=resumePath]').prop('value'));",
                  "pm.environment.set('allowInteraction', $('input[name=allowInteraction]').prop('value'));",
                  "pm.environment.set('reauth', $('input[name=reauth]').prop('value'));",
                  "pm.environment.set('consentId', $('input[name=consentId]').prop('value'));",
                  "*/",
                  "pm.environment.set('cid', pm.response.headers.get('x-appCorrelationId'));",
                  "pm.environment.set('tid', pm.response.headers.get('X-Transaction-Id'));",
                  "pm.environment.set('referer', pm.response.headers.get('Referer'));",
                  "pm.environment.set('pf_cookie', pm.cookies.get('PF'));",
                  "pm.environment.set('pf_tracking_cookie', pm.cookies.get('PF_TRACKING'));",
                  "//console.log('consent id: ' + pm.environment.get('consentId'));",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Follow SAML redirect",
          "request": {
            "url": {
              "host": [
                "{{login_redirect1}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "description": {
                  "content": "http content type",
                  "type": "text/plain"
                },
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "Referer",
                "value": "{{referer}}"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "key": "X-Transaction-Id",
                "value": "{{tid}}"
              }
            ],
            "method": "GET",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "consentId",
                  "value": "{{consentId}}"
                },
                {
                  "key": "resumePath",
                  "value": "{{resumePath}}"
                },
                {
                  "key": "allowInteraction",
                  "value": "{{allowInteraction}}"
                },
                {
                  "key": "reauth",
                  "value": "{{reauth}}"
                }
              ],
              "options": {
                "raw": {
                  "language": "text"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "//var getParamFromQuery = function (key)",
                  "//{",
                  "//    var x = pm.request.url.query;",
                  "//    var newArr = x.filter(function(item){",
                  "//        return item !== null && item.key == key;",
                  "//    });",
                  "//    return newArr[0];",
                  "//};",
                  "//var getValueFromQuery = function (key)",
                  "//{",
                  "//    return getParamFromQuery(key).value;  ",
                  "//};",
                  "if (responseCode.code == 302) { ",
                  "    postman.setNextRequest('Send TPP Payload');",
                  "} else {",
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "//pm.environment.set('resumePath', getValueFromQuery(\"resumePath\"));",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('consent_path', $('form[method=post]').prop('action'));",
                  "tests[\"consent path is not empty\"] = pm.environment.get('consent_path') !== \"\";",
                  "pm.environment.set('consent_response', $('input[name=accept]').prop('value'));",
                  "pm.environment.set('resumeBase', $('input[name=resumeBase]').prop('value'));",
                  "pm.environment.set('resumePath', $('input[name=resumePath]').prop('value'));",
                  "pm.environment.set('consentId', $('input[name=consentId]').prop('value'));",
                  "}"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "name": "Get access token by Consent UI",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "token.oauth2"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "disabled": true,
                "key": "Cookie",
                "value": "PF={{pf_cookie}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                },
                {
                  "key": "client_id",
                  "value": "{{wdpapi_consent_clientid}}"
                },
                {
                  "key": "client_secret",
                  "value": "{{wdpapi_consent_client_secret}}"
                },
                {
                  "key": "scope",
                  "value": "{{consent_enquiry_scope}} {{consent_maintain_scope}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "var jsonBody = pm.response.json();",
                  "tests[\"Token type is bearer\"] = jsonBody.token_type === 'Bearer';",
                  "pm.environment.set('access_token', jsonBody.access_token);",
                  "tests[\"X-Frame-Options header is SAMEORIGIN\"] = postman.getResponseHeader(\"X-Frame-Options\") === \"SAMEORIGIN\";"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Consent by Consent UI",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "v2",
                "Consents"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}scim"
              ],
              "query": [
                {
                  "key": "filter",
                  "value": "(id eq \"{{consentId}}\")"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "key": "Cookie",
                "value": "PF={{pf_cookie}}"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code == 401) { ",
                  "    postman.setNextRequest('Get access token by Consent UI');",
                  "} else {",
                  "tests[\"response code is 200\"] = responseCode.code == 200;",
                  "var jsonData = pm.response.json();",
                  "tests[\"schema listresponse\"] = jsonData.schemas == \"urn:ietf:params:scim:api:messages:2.0:ListResponse\";",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Submit Consent",
          "request": {
            "url": {
              "host": [
                "{{consent_path}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "description": {
                  "content": "http content type",
                  "type": "text/plain"
                },
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "key": "X-Transaction-Id",
                "value": "{{tid}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "consent",
                  "value": "accept"
                },
                {
                  "key": "continue",
                  "value": "mock"
                },
                {
                  "key": "consentId",
                  "value": "{{consentId}}"
                },
                {
                  "key": "resumePath",
                  "value": "{{resumePath}}"
                },
                {
                  "key": "resumeBase",
                  "value": "{{resumeBase}}"
                }
              ],
              "options": {
                "raw": {
                  "language": "text"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "const $ = cheerio.load(responseBody);",
                  "pm.environment.set('return_path', $('form[method=post]').prop('action'));",
                  "tests[\"return path is not empty\"] = pm.environment.get('return_path') !== \"\";",
                  "pm.environment.set('resumePath', $('input[name=resumePath]').prop('value'));",
                  "console.log(pm.environment.get('return_path'))"
                ]
              }
            }
          ]
        },
        {
          "name": "Follow Resume redirect",
          "request": {
            "url": {
              "host": [
                "{{return_path}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "http content type",
                  "type": "text/plain"
                },
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "disabled": true,
                "key": "Cookie",
                "value": "PF={{pf_cookie}};PF_TRACKING={{pf_tracking_cookie}};PF_TRACKING={{pf_tracking_cookie}}"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "key": "X-Transaction-Id",
                "value": "{{tid}}"
              },
              {
                "disabled": true,
                "key": "Cookie",
                "value": "PF={{pf_cookie}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code != 302) { ",
                  "    postman.setNextRequest('Send TPP Payload');",
                  "} else {",
                  "tests[\"response code is 302\"] = responseCode.code === 302;",
                  "var lo=pm.response.headers.get('Location');",
                  "if (lo == null || lo.includes('error')) {",
                  "postman.setNextRequest('Send TPP Payload');",
                  "} else {",
                  "pm.environment.set('tpp_code', lo.match(\"code=([^&]*)\")[0].match(\"[^=]+$\"));",
                  "tests[\"code is not empty\"] = pm.environment.get('tpp_code') !== \"\";",
                  "pm.environment.set('tpp_id_token', lo.match(\"id_token=([^&]*)\")[0].match(\"[^=]+$\"));",
                  "tests[\"id token is not empty\"] = pm.environment.get('tpp_id_token') !== \"\";",
                  "}}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Access Token from Code",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "token.oauth2"
              ],
              "host": [
                "{{cdr_idp_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "authorization_code"
                },
                {
                  "key": "client_id",
                  "value": "{{tpp_clientId}}"
                },
                {
                  "key": "client_assertion",
                  "value": "{{signed_jwt}}"
                },
                {
                  "key": "code",
                  "value": "{{tpp_code}}"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                },
                {
                  "key": "redirect_uri",
                  "value": "{{tpp_redirectUri}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonBody = pm.response.json();",
                  "if (responseCode.code == 400) {",
                  "postman.setNextRequest(\"Send TPP Payload\");",
                  "} else {pm.environment.set(\"tpp_access_token\",jsonBody.access_token);",
                  "pm.environment.set(\"tpp_refresh_token\",jsonBody.refresh_token);",
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "tests[\"Token type is bearer\"] = jsonBody.token_type === 'Bearer';",
                  "tests[\"X-Frame-Options header is SAMEORIGIN\"] = postman.getResponseHeader(\"X-Frame-Options\") === \"SAMEORIGIN\";",
                  "tests[\"Arrangement id is presented\"] = jsonBody.cdr_arrangement_id != undefined && jsonBody.cdr_arrangement_id.startsWith(\"3603\");",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/* loading of the jsrsasign library into Postman Sandbox */",
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(pm.environment.get(\"jsrsasign-js\")); //import javascript jsrsasign",
                  "",
                  "var currentTime = +new Date(); // the current time in milliseconds",
                  "var issuedAtTimeSeconds = currentTime/1000;",
                  "var expirationTimeSeconds = currentTime/1000 + 3600;",
                  "",
                  "// define jwt header",
                  "var header = {",
                  "\t\"typ\": \"JWT\",",
                  "\t\"alg\": \"PS256\"",
                  "};",
                  "header.kid = pm.variables.get(\"tpp_kid\");",
                  "",
                  "// add variable data to payload",
                  "data.iss = pm.variables.get(\"tpp_clientId\");",
                  "data.sub = pm.variables.get(\"tpp_clientId\");",
                  "data.iat = issuedAtTimeSeconds;",
                  "data.exp = expirationTimeSeconds;",
                  "data.aud = \"https://\"+pm.variables.get(\"cdr_idp_domain\")+pm.variables.get(\"url_prefix\")+\"identity/as/token.oauth2\";",
                  "data.jti = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 12);",
                  "",
                  "// load the private key",
                  "var privateKey = pm.variables.get(\"tpp_privateKey\");",
                  "",
                  "// sign token",
                  "var signedToken = KJUR.jws.JWS.sign(header.alg, JSON.stringify(header), JSON.stringify(data), privateKey);",
                  "pm.environment.set(\"signed_jwt\", signedToken);",
                  "",
                  "console.log(signedToken);",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get access token for Arrangement Check",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "token.oauth2"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "disabled": true,
                "key": "Cookie",
                "value": "PF={{pf_cookie}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                },
                {
                  "key": "client_id",
                  "value": "{{wdpapi_consent_clientid}}"
                },
                {
                  "key": "client_secret",
                  "value": "{{wdpapi_consent_client_secret}}"
                },
                {
                  "key": "scope",
                  "value": "{{consent_enquiry_scope}} {{consent_maintain_scope}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "var jsonBody = pm.response.json();",
                  "tests[\"Token type is bearer\"] = jsonBody.token_type === 'Bearer';",
                  "pm.environment.set('access_token', jsonBody.access_token);",
                  "tests[\"X-Frame-Options header is SAMEORIGIN\"] = postman.getResponseHeader(\"X-Frame-Options\") === \"SAMEORIGIN\";"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Consent for Arrangement Check",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "v2",
                "Consents"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}scim"
              ],
              "query": [
                {
                  "key": "filter",
                  "value": "(id eq \"{{consentId}}\")"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "key": "Cookie",
                "value": "PF={{pf_cookie}}"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code == 401) { ",
                  "    postman.setNextRequest('Get access token for Arrangement Check');",
                  "} else {",
                  "tests[\"response code is 200\"] = responseCode.code == 200;",
                  "var jsonData = pm.response.json();",
                  "tests[\"schema listresponse\"] = jsonData.schemas == \"urn:ietf:params:scim:api:messages:2.0:ListResponse\";",
                  "tests[\"totalResults should be 1\"] = jsonData.totalResults == 1;",
                  "tests[\"Consent State should be active\"] = jsonData.Resources[0].state == \"active\";",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Positive",
      "item": [
        {
          "name": "Introspect the Refresh Token - Before Delete",
          "request": {
            "description": {
              "content": "Introspect the tpp refresh token and validate it is active before revocation.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "introspect.oauth2"
              ],
              "host": [
                "{{cdr_idp_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token",
                  "value": "{{tpp_refresh_token}}"
                },
                {
                  "key": "token_type_hint",
                  "value": "refresh_token"
                },
                {
                  "key": "client_id",
                  "value": "{{tpp_clientId}}"
                },
                {
                  "key": "client_assertion",
                  "value": "{{signed_jwt}}"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/* loading of the jsrsasign library into Postman Sandbox */",
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(pm.environment.get(\"jsrsasign-js\")); //import javascript jsrsasign",
                  "",
                  "var currentTime = +new Date(); // the current time in milliseconds",
                  "var issuedAtTimeSeconds = currentTime/1000;",
                  "var expirationTimeSeconds = currentTime/1000 + 3600;",
                  "",
                  "// define jwt header",
                  "var header = {",
                  "\t\"typ\": \"JWT\",",
                  "\t\"alg\": \"PS256\"",
                  "};",
                  "header.kid = pm.variables.get(\"tpp_kid\");",
                  "",
                  "// add variable data to payload",
                  "data.iss = pm.variables.get(\"tpp_clientId\");",
                  "data.sub = pm.variables.get(\"tpp_clientId\");",
                  "data.iat = issuedAtTimeSeconds;",
                  "data.exp = expirationTimeSeconds;",
                  "data.aud = \"https://\"+pm.variables.get(\"cdr_idp_domain\")+pm.variables.get(\"url_prefix\")+\"identity/as/introspect.oauth2\";",
                  "data.jti = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 12);",
                  "",
                  "// load the private key",
                  "var privateKey = pm.variables.get(\"tpp_privateKey\");",
                  "",
                  "// sign token",
                  "var signedToken = KJUR.jws.JWS.sign(header.alg, JSON.stringify(header), JSON.stringify(data), privateKey);",
                  "pm.environment.set(\"signed_jwt\", signedToken);",
                  "",
                  "console.log(signedToken);",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "//Test the token is currently active",
                  "var jsonBody = pm.response.json();",
                  "tests[\"Refresh Token is active\"] = jsonBody.active === true;",
                  "tests[\"Arrangement id is presented\"] = jsonBody.cdr_arrangement_id != undefined && jsonBody.cdr_arrangement_id.startsWith(\"3603\");",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Revoke Refresh Token",
          "request": {
            "description": {
              "content": "Call Revocation endpoint using the generated refresh token and validate successful response.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "revoke_token.oauth2"
              ],
              "host": [
                "{{cdr_idp_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "X-Target-Stack",
                "value": "{{target_stack}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-Header",
                "value": "PingFederate"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{tpp_clientId}}"
                },
                {
                  "key": "client_assertion",
                  "value": "{{signed_jwt}}"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                },
                {
                  "key": "token",
                  "value": "{{tpp_refresh_token}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/* loading of the jsrsasign library into Postman Sandbox */",
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(pm.environment.get(\"jsrsasign-js\")); //import javascript jsrsasign",
                  "",
                  "var currentTime = +new Date(); // the current time in milliseconds",
                  "var issuedAtTimeSeconds = currentTime/1000;",
                  "var expirationTimeSeconds = currentTime/1000 + 3600;",
                  "",
                  "// define jwt header",
                  "var header = {",
                  "\t\"typ\": \"JWT\",",
                  "\t\"alg\": \"PS256\"",
                  "};",
                  "header.kid = pm.variables.get(\"tpp_kid\");",
                  "",
                  "// add variable data to payload",
                  "data.iss = pm.variables.get(\"tpp_clientId\");",
                  "data.sub = pm.variables.get(\"tpp_clientId\");",
                  "data.iat = issuedAtTimeSeconds;",
                  "data.exp = expirationTimeSeconds;",
                  "data.aud = \"https://\"+pm.variables.get(\"cdr_idp_domain\")+pm.variables.get(\"url_prefix\")+\"identity/as/token.oauth2\";",
                  "data.jti = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 12);",
                  "",
                  "// load the private key",
                  "var privateKey = pm.variables.get(\"tpp_privateKey\");",
                  "",
                  "// sign token",
                  "var signedToken = KJUR.jws.JWS.sign(header.alg, JSON.stringify(header), JSON.stringify(data), privateKey);",
                  "pm.environment.set(\"signed_jwt\", signedToken);",
                  "",
                  "console.log(signedToken);",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Introspect the Refresh Token - After Delete",
          "request": {
            "description": {
              "content": "Introspect the tpp refresh token and validate it is inactive after revocation.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "introspect.oauth2"
              ],
              "host": [
                "{{cdr_idp_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token",
                  "value": "{{tpp_refresh_token}}"
                },
                {
                  "key": "token_type_hint",
                  "value": "refresh_token"
                },
                {
                  "key": "client_id",
                  "value": "{{tpp_clientId}}"
                },
                {
                  "key": "client_assertion",
                  "value": "{{signed_jwt}}"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/* loading of the jsrsasign library into Postman Sandbox */",
                  "var navigator = {}; //fake a navigator object for the lib",
                  "var window = {}; //fake a window object for the lib",
                  "eval(pm.environment.get(\"jsrsasign-js\")); //import javascript jsrsasign",
                  "",
                  "var currentTime = +new Date(); // the current time in milliseconds",
                  "var issuedAtTimeSeconds = currentTime/1000;",
                  "var expirationTimeSeconds = currentTime/1000 + 3600;",
                  "",
                  "// define jwt header",
                  "var header = {",
                  "\t\"typ\": \"JWT\",",
                  "\t\"alg\": \"PS256\"",
                  "};",
                  "header.kid = pm.variables.get(\"tpp_kid\");",
                  "",
                  "// add variable data to payload",
                  "data.iss = pm.variables.get(\"tpp_clientId\");",
                  "data.sub = pm.variables.get(\"tpp_clientId\");",
                  "data.iat = issuedAtTimeSeconds;",
                  "data.exp = expirationTimeSeconds;",
                  "data.aud = \"https://\"+pm.variables.get(\"cdr_idp_domain\")+pm.variables.get(\"url_prefix\")+\"identity/as/introspect.oauth2\";",
                  "data.jti = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 12);",
                  "",
                  "// load the private key",
                  "var privateKey = pm.variables.get(\"tpp_privateKey\");",
                  "",
                  "// sign token",
                  "var signedToken = KJUR.jws.JWS.sign(header.alg, JSON.stringify(header), JSON.stringify(data), privateKey);",
                  "pm.environment.set(\"signed_jwt\", signedToken);",
                  "",
                  "console.log(signedToken);",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "//Test the token is currently active",
                  "var jsonBody = pm.response.json();",
                  "tests[\"Refresh Token is inactive\"] = jsonBody.active === false;",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get access token for Consent Lookup",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "token.oauth2"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                },
                {
                  "key": "client_id",
                  "value": "{{wdpapi_consent_clientid}}"
                },
                {
                  "key": "client_secret",
                  "value": "{{wdpapi_consent_client_secret}}"
                },
                {
                  "key": "scope",
                  "value": "{{consent_enquiry_scope}} {{consent_maintain_scope}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "var jsonBody = pm.response.json();",
                  "tests[\"Token type is bearer\"] = jsonBody.token_type === 'Bearer';",
                  "pm.environment.set('access_token', jsonBody.access_token);",
                  "tests[\"X-Frame-Options header is SAMEORIGIN\"] = postman.getResponseHeader(\"X-Frame-Options\") === \"SAMEORIGIN\";"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Consent After Revocation",
          "request": {
            "description": {
              "content": "This test validates that Consent status is changed to 'revoked' after Consent is revoked via WBC Dashboard",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "v2",
                "Consents"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}scim"
              ],
              "query": [
                {
                  "key": "filter",
                  "value": "(id eq \"{{consentId}}\")"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "x-appCorrelationId",
                "value": "{{cid}}"
              },
              {
                "key": "Cookie",
                "value": "PF={{pf_cookie}}"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code == 401) { ",
                  "    postman.setNextRequest('Get access token for Consent Lookup');",
                  "} else {",
                  "tests[\"response code is 200\"] = responseCode.code == 200;",
                  "var jsonData = pm.response.json();",
                  "tests[\"Consent Status is revoked\"] =  jsonData.Resources[0].state === \"revoked\"",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get Access Token for ConsentRT Lookup",
          "request": {
            "description": {
              "content": "This test gets an access token for accessing ConsentRT REST API.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "token.oauth2"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials"
                },
                {
                  "key": "client_id",
                  "value": "{{wdpapi_consent_rt_clientid}}"
                },
                {
                  "key": "client_secret",
                  "value": "{{wdpapi_consent_rt_client_secret}}"
                },
                {
                  "key": "scope",
                  "value": "{{consentrt_read_scope}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "var jsonBody = pm.response.json();",
                  "tests[\"Token type is bearer\"] = jsonBody.token_type === 'Bearer';",
                  "pm.environment.set('access_token_consentrt_read', jsonBody.access_token);",
                  ""
                ]
              }
            }
          ]
        },
        {
          "name": "Get Consent RT After Revocation",
          "request": {
            "description": {
              "content": "This test validates that ConsentRT object can be retrieved and ConsentRT status is changed to 'revoked' after Consent is revoked via WBC Dashboard",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "v1",
                "{{consentId}}"
              ],
              "host": [
                "{{extranet_domain}}{{url_prefix}}consentrt"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{access_token_consentrt_read}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (responseCode.code > 400) { ",
                  "    postman.setNextRequest('Get Access Token for ConsentRT Lookup');",
                  "} else {",
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "var jsonData = pm.response.json();",
                  "",
                  "tests[\"Refresh Token equals to Original Refresh Token\"] = jsonData.refreshToken === pm.environment.get(\"tpp_refresh_token\");",
                  "tests[\"Refresh Token Status is revoked\"] = jsonData.refreshTokenStatus === 'revoked';",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": [],
      "protocolProfileBehavior": {}
    },
    {
      "name": "Negative",
      "item": [
        {
          "name": "Revoke Refresh Token With Wrong Creds",
          "request": {
            "description": {
              "content": "Call Revocation Endpoint with wrong credentials",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "as",
                "revoke_token.oauth2"
              ],
              "host": [
                "{{cdr_idp_domain}}{{url_prefix}}identity"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "name": "Content-Type",
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "X-Target-Stack",
                "value": "{{target_stack}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "X-XSRF-Header",
                "value": "PingFederate"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{tpp_clientId}}"
                },
                {
                  "key": "client_assertion",
                  "value": "{{corruped_signed_jwt}}"
                },
                {
                  "key": "client_assertion_type",
                  "value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
                },
                {
                  "key": "token",
                  "value": "{{tpp_refresh_token}}"
                }
              ]
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 401\"] = responseCode.code === 401;",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Create a dummy jwt token to use for authentication of the client",
                  "// Defining our token parts",
                  "var header = {",
                  "  \"alg\": \"HS256\",",
                  "  \"typ\": \"JWT\"",
                  "};",
                  "",
                  "var data = {",
                  "  \"id\": 1,",
                  "  \"username\": \"some user\"",
                  "};",
                  "",
                  "var secret = \"My very confidential secret!!!\";",
                  "",
                  "function base64url(source) {",
                  "  // Encode in classical base64",
                  "  encodedSource = CryptoJS.enc.Base64.stringify(source);",
                  "  ",
                  "  // Remove padding equal characters",
                  "  encodedSource = encodedSource.replace(/=+$/, '');",
                  "  ",
                  "  // Replace characters according to base64url specifications",
                  "  encodedSource = encodedSource.replace(/\\+/g, '-');",
                  "  encodedSource = encodedSource.replace(/\\//g, '_');",
                  "  ",
                  "  return encodedSource;",
                  "}",
                  "",
                  "var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
                  "var encodedHeader = base64url(stringifiedHeader);",
                  "",
                  "var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));",
                  "var encodedData = base64url(stringifiedData);",
                  "",
                  "var signature = encodedHeader + \".\" + encodedData;",
                  "signature = CryptoJS.HmacSHA256(signature, secret);",
                  "signature = base64url(signature);",
                  "",
                  "pm.environment.set(\"corruped_signed_jwt\", encodedHeader+\".\"+encodedData+\".\"+signature);",
                  "",
                  "console.log(pm.environment.get(\"corruped_signed_jwt\"));",
                  ""
                ]
              }
            }
          ]
        }
      ],
      "event": [],
      "protocolProfileBehavior": {}
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Inject the target stack header at collection level",
          "// in order to direct the traffic to either the active or inactive stack",
          "pm.request.headers.add({",
          "\t   'key': \"X-Target-Stack\",",
          "\t    'value': \"{{target_stack}}\"",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "protocolProfileBehavior": {},
  "variable": [],
  "info": {
    "name": "CIAM_internet_TPP_Initiated_Consent_Revocation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "This collection of requests create a valid consent, access token and refresh token using AU Open Banking Grant Consent Flow. \nThe refresh token related consent and consentrt objects are then revoked using the \"Revocation Endpoint\" of PingFederate and results are validated accordingly.",
      "type": "text/plain"
    }
  }
}